syntax = "proto3";

package pb;

import "rpc_create_user.proto";
import "rpc_login_user.proto";
import "rpc_update_user.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "simple-bank/pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Simple Bank API"
    version: "1.2"
    contact: {
      name: "Personal Project"
      url: "https://github.com/go-backend-development"
      email: "none@example.com"
    }
    license: {
      name: "BSD 3-Clause License"
      url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/main/LICENSE"
    }
    extensions: {
      key: "x-something-something"
      value: {string_value: "yadda"}
    }
  }
};

service SimpleBank {
    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
            post: "/v1/create_user"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          description: "This API creates a new user using gRPC"
          summary: "Create new User"
          tags: "create_user"
        };
    }
    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
      option (google.api.http) = {
        patch: "/v1/update_user"
        body: "*"
      };
      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        description: "This API updates a user using gRPC"
        summary: "Update User"
        tags: "update_user"
      };
    }
    rpc LoginUser(LoginUserRequest) returns (LoginUserResponse) {
        option (google.api.http) = {
            post: "/v1/login_user"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
          description: "This API logs in a user using gRPC"
          summary: "Login User"
          tags: "login_user"
        };
    }
}